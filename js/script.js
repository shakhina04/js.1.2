// Массивы

// let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
// let arr2 = [1, true, "str", "hello", null, false, {
//     name: "Alex",
//     age: 18, 
// }, {
//     name: "Alex",
//     age: 18, 

// } 
// ]

// arr[порядковый номер]
// нахождение элемента
// arr.lenth
// длина массива

 
// console.log(arr2.length); // lenth - длина массива

// arr[12] = undefined
// console.log(arr[0], arr[arr.length - 1]); // в этом примере в консоли отобразятся первая и последние цифры. "0 " вытаскивает первую цифру, а "-1" последнюю 


// // // Добавление
// arr.push(0) // "0" добавится в конце, после 12     // можно добавить еще элементы: arr.push({name: "Shakhina", age: 18})
// arr.unshift(0) // добавление элемента в начало

// // // Удаление
// arr.shift() // удаляет первый элемент
// arr.pop() // удаляет последний элемент

// // arr.reverse() // переворачивает порядок 

// let crt_c = arr.slice(0, 3)  // откуда, до куда
// let ctrl_x = arr.splice(0,3) // откуда, сколько
// // Если написать только 1 цифру, то оно будет показывать цифры после этого числа

// console.log(arr.slice(6));
// console.log(arr, ctrl_x);

// arr.concat(ctrl_x,[13,14,15])  // Обьединение массивов

// arr.sort(a, b => a - b) // работает только с типом данных "Number"

// console.log(arr);








// H/T
// Напишите однострочное решение, которое вычисляет сумму квадратных корней для всех чётных чисел целочисленного массива.


let a = [1, 2, 3, 4, 5, 6, 7, 8, 9]

for(let item of a){
    if (item % 2 == 0) {
        console.log(item * item);
    }
    
} 



// let b = a.filter(item => item ? item % 2 == 0 : '')


// console.log(b);




// console.log(
//     // Входной массив
//     [1, 4, 3, 0, 4, 5, 4]
//       // Оставляем только чётные числа
//       .filter(element => !(element % 2))
//       // Считаем квадратный корень и записываем в аккумулятор
//       .reduceRight((accumulator, element) => accumulator + Math.sqrt(element), 0)
//    ); // 6










// Задача такая в интернете: Напишите однострочное решение, которое вычисляет сумму квадратных корней для всех чётных чисел целочисленного массива.

// Это её решение :
// Console.log(
// // Входной массив
// [1, 4, 3, 0, 4, 5, 4]
// // Оставляем только чётные числа
// .filter(element => !(element % 2))
// // Считаем квадратный корень и записываем в аккумулятор
// .reduceRight((accumulator, element) => accumulator + Math.sqrt(element), 0)
// ); // 6




// Использование reduceRight тоже не совсем понятно: Какая разница, суммировать числа справа налевао или слева направо?)

// [1, 4, 3, 0, 4, 5, 4].filter(n => n % 2 == 0).reduce( (sum, n) => sum + n**0.5, 0 );

// Число в 0.5 степени, и квадратный корень — одно и то же.

// Если пугают фильтр и reduce, здесь написано это:

// let arr = [1, 4, 3, 0, 4, 5, 4];

// // filter
// let result = [];
// for (let i = 0; i < arr.length; i++ ) {
//   if (arr[ i ] % 2 == 0) result.push( arr[ i ] );
// }

// // reduce
// let sum = 0;
// for (let i = 0; i < result.length; i++) {
//   sum += result[ i ] ** 0.5;
// }

// console.log( sum ); // 6
// ______________

// Фактически, оно хоть и однострочное, но делает два прохода. Это можно было решить одним циклом. Если скорость важна.

// Ну например:

// [1, 4, 3, 0, 4, 5, 4].reduce( (sum, n) => sum + (n % 2? 0 : n)**0.5, 0 );